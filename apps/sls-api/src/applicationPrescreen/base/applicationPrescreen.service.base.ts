/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  ApplicationPrescreen, // @ts-ignore
  BorrowerPrescreen,
} from "@prisma/client";

export class ApplicationPrescreenServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count<T extends Prisma.ApplicationPrescreenCountArgs>(
    args: Prisma.SelectSubset<T, Prisma.ApplicationPrescreenCountArgs>
  ): Promise<number> {
    return this.prisma.applicationPrescreen.count(args);
  }

  async applicationPrescreens<
    T extends Prisma.ApplicationPrescreenFindManyArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.ApplicationPrescreenFindManyArgs>
  ): Promise<ApplicationPrescreen[]> {
    return this.prisma.applicationPrescreen.findMany(args);
  }
  async applicationPrescreen<
    T extends Prisma.ApplicationPrescreenFindUniqueArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.ApplicationPrescreenFindUniqueArgs>
  ): Promise<ApplicationPrescreen | null> {
    return this.prisma.applicationPrescreen.findUnique(args);
  }
  async createApplicationPrescreen<
    T extends Prisma.ApplicationPrescreenCreateArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.ApplicationPrescreenCreateArgs>
  ): Promise<ApplicationPrescreen> {
    return this.prisma.applicationPrescreen.create<T>(args);
  }
  async updateApplicationPrescreen<
    T extends Prisma.ApplicationPrescreenUpdateArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.ApplicationPrescreenUpdateArgs>
  ): Promise<ApplicationPrescreen> {
    return this.prisma.applicationPrescreen.update<T>(args);
  }
  async deleteApplicationPrescreen<
    T extends Prisma.ApplicationPrescreenDeleteArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.ApplicationPrescreenDeleteArgs>
  ): Promise<ApplicationPrescreen> {
    return this.prisma.applicationPrescreen.delete(args);
  }

  async getBorrowerPrescreens(
    parentId: string
  ): Promise<BorrowerPrescreen | null> {
    return this.prisma.applicationPrescreen
      .findUnique({
        where: { id: parentId },
      })
      .borrowerPrescreens();
  }
}
