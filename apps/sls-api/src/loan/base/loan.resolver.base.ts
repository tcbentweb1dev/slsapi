/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Loan } from "./Loan";
import { LoanCountArgs } from "./LoanCountArgs";
import { LoanFindManyArgs } from "./LoanFindManyArgs";
import { LoanFindUniqueArgs } from "./LoanFindUniqueArgs";
import { CreateLoanArgs } from "./CreateLoanArgs";
import { UpdateLoanArgs } from "./UpdateLoanArgs";
import { DeleteLoanArgs } from "./DeleteLoanArgs";
import { LoanService } from "../loan.service";
@graphql.Resolver(() => Loan)
export class LoanResolverBase {
  constructor(protected readonly service: LoanService) {}

  async _loansMeta(
    @graphql.Args() args: LoanCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Loan])
  async loans(@graphql.Args() args: LoanFindManyArgs): Promise<Loan[]> {
    return this.service.loans(args);
  }

  @graphql.Query(() => Loan, { nullable: true })
  async loan(@graphql.Args() args: LoanFindUniqueArgs): Promise<Loan | null> {
    const result = await this.service.loan(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Loan)
  async createLoan(@graphql.Args() args: CreateLoanArgs): Promise<Loan> {
    return await this.service.createLoan({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Loan)
  async updateLoan(@graphql.Args() args: UpdateLoanArgs): Promise<Loan | null> {
    try {
      return await this.service.updateLoan({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Loan)
  async deleteLoan(@graphql.Args() args: DeleteLoanArgs): Promise<Loan | null> {
    try {
      return await this.service.deleteLoan(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
