/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { BorrowerPrescreen } from "./BorrowerPrescreen";
import { BorrowerPrescreenCountArgs } from "./BorrowerPrescreenCountArgs";
import { BorrowerPrescreenFindManyArgs } from "./BorrowerPrescreenFindManyArgs";
import { BorrowerPrescreenFindUniqueArgs } from "./BorrowerPrescreenFindUniqueArgs";
import { CreateBorrowerPrescreenArgs } from "./CreateBorrowerPrescreenArgs";
import { UpdateBorrowerPrescreenArgs } from "./UpdateBorrowerPrescreenArgs";
import { DeleteBorrowerPrescreenArgs } from "./DeleteBorrowerPrescreenArgs";
import { BorrowerPrescreenService } from "../borrowerPrescreen.service";
@graphql.Resolver(() => BorrowerPrescreen)
export class BorrowerPrescreenResolverBase {
  constructor(protected readonly service: BorrowerPrescreenService) {}

  async _borrowerPrescreensMeta(
    @graphql.Args() args: BorrowerPrescreenCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [BorrowerPrescreen])
  async borrowerPrescreens(
    @graphql.Args() args: BorrowerPrescreenFindManyArgs
  ): Promise<BorrowerPrescreen[]> {
    return this.service.borrowerPrescreens(args);
  }

  @graphql.Query(() => BorrowerPrescreen, { nullable: true })
  async borrowerPrescreen(
    @graphql.Args() args: BorrowerPrescreenFindUniqueArgs
  ): Promise<BorrowerPrescreen | null> {
    const result = await this.service.borrowerPrescreen(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => BorrowerPrescreen)
  async createBorrowerPrescreen(
    @graphql.Args() args: CreateBorrowerPrescreenArgs
  ): Promise<BorrowerPrescreen> {
    return await this.service.createBorrowerPrescreen({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => BorrowerPrescreen)
  async updateBorrowerPrescreen(
    @graphql.Args() args: UpdateBorrowerPrescreenArgs
  ): Promise<BorrowerPrescreen | null> {
    try {
      return await this.service.updateBorrowerPrescreen({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => BorrowerPrescreen)
  async deleteBorrowerPrescreen(
    @graphql.Args() args: DeleteBorrowerPrescreenArgs
  ): Promise<BorrowerPrescreen | null> {
    try {
      return await this.service.deleteBorrowerPrescreen(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
